package com.jiaflu.leetcode;

import java.util.Arrays;
import java.util.LinkedList;

/**
 * 题目：根据身高重建队列
 * 假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，
 * k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。
 * 注意：
 * 总人数少于1100人。
 *
 * 示例
 * 输入:
 * [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
 * 输出:
 * [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
 *
 *
 * 解答：
 * - 排序
 * - 插入
 *
 * 思路：
 * - 假设候选队列为 A，已经站好队的队列为 B.
 *
 * - 从 A 里挑身高最高的人 x 出来，插入到 B.
 * - 因为 B 中每个人的身高都比 x 要高，因此 x 插入的位置，
 * - 就是看 x 前面应该有多少人就行了。比如 x 前面有 5 个人，那 x 就插入到队列 B 的第 5 个位置。
 *
 *
 */

// 先排序
// [7,0], [7,1], [6,1], [5,0], [5,2], [4,4]

// 再一个一个插入。
// [7,0]
// [7,0], [7,1]
// [7,0], [6,1], [7,1]
// [5,0], [7,0], [6,1], [7,1]
// [5,0], [7,0], [5,2], [6,1], [7,1]
// [5,0], [7,0], [5,2], [6,1], [4,4], [7,1]

public class $406_Queue_Reconstruction_by_Height {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, (o1, o2) -> o1[0] == o2[0] ? o1[1] - o2[1] : o2[0] - o1[0]);

        LinkedList<int[]> res = new LinkedList<>();

        for (int[] i : people) {
            res.add(i[1], i);
        }

        return res.toArray(new int[res.size()][2]);
    }
}
